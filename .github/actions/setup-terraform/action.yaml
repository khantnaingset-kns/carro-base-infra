name: "Terraform Setup"
description: "Terraform Setup Composite Action"
inputs:
  working_directory:
    description: "Working dir for Terraform"
    required: true
  bucket_name:
    description: "State Store S3 Bucket Name"
    required: true
  bucket_key:
    description: "State Store S3 Bucket Key"
    required: true
  lock_dynamodb_name:
    description: "State lock DynamoDB Name"
    required: true
  aws_region:
    description: "AWS Region"
    required: true
outputs:
  init_outcome:
    description: "Terraform init outcome"
    value: ${{ steps.init.outcome  }}
  fmt_outcome:
    description: "Terraform fmt outcome"
    value: ${{ steps.init.outcome  }}
  validate_outcome:
    description: "Terraform validate outcome"
    value: ${{ steps.validate.outcome }}
  tfsec_outcome:
    description: "Terraform tfsec check outcome"
    value: ${{ steps.tfsec.outcome }}
  tfsec_stdout:
    description: "Terraform tfsec check stdout"
    value: ${{ steps.tfsec.outputs.stdout }}


runs:
  using: composite
  steps:
    - name: Setup Terraform
      id: setup
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.2"

    - name: Terraform Init
      shell: bash
      id: init
      run: |
        terraform init \
          -backend-config="bucket=${{ inputs.bucket_name }}" \
          -backend-config="key=${{ inputs.bucket_key }}" \
          -backend-config="region=${{ inputs.aws_region }}" \
          -backend-config="dynamodb_table=${{ inputs.lock_dynamodb_name }}"
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Validate
      shell: bash
      id: validate
      run: |
        terraform validate
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform format
      shell: bash
      id: fmt
      run: |
        terraform fmt -recursive

    - name: Security Scan with TFSec
      id: tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true
