name: "Terraform CI"

on:
  workflow_call:
    inputs:
      dir:
        required: true
        type: string
      bucket_name:
        required: true
        type: string
      bucket_key:
        required: true
        type: string
      lock_dynamodb_name:
        required: true
        type: string
      region:
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_key_id:
        required: true
      tfc_token:
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key_id }}
  BUCKET_NAME: ${{ inputs.bucket_name }}
  BUCKET_KEY: ${{ inputs.bucket_key }}
  LOCK_DYNAMODB_NAME: ${{ inputs.lock_dynamodb_name }}
  REGION: ${{ inputs.region }}

jobs:
  terraform:
    name: "Test & Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{inputs.dir}}

    steps:
      - name: Checkout the code to the runner
        uses: actions/checkout@v4

      - name: Setup Terraform
        id: setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.2"
          cli_config_credentials_token: ${{ secrets.tfc_token }}

      - name: Terraform Init
        id: init
        run: >
          terraform init

      - name: Terraform Validate
        id: validate
        run: >
          terraform validate

      - name: Security Scan with TFSec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

      - name: Terraform Plan
        id: plan
        run: >
          terraform plan -no-color -input=false
        continue-on-error: false

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
