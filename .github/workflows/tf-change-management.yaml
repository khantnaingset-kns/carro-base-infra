name: Terraform Change Management Workflow

on:
  workflow_call:
    inputs:
      working_directory:
        required: true
        type: string
      allow_plan_error:
        required: true
        type: boolean

    secrets:
      aws_access_key_id:
        required: true
      aws_secret_key_id:
        required: true
      bucket_name:
        required: true
      bucket_key:
        required: true
      lock_dynamodb_name:
        required: true
      aws_region:
        required: true

jobs:
  terraform:
    name: "TF Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./${{inputs.working_directory}}

    steps:
      - name: Checkout the code to the runner
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_key_id }}
          aws-region: ${{ secrets.aws_region }}

      - name: Terraform Setup
        uses: ./.github/actions/setup-terraform
        id: setup
        with:
          working_directory: ${{ inputs.working_directory }}
          bucket_name: ${{ secrets.bucket_name }}
          bucket_key: ${{ secrets.bucket_key }}
          lock_dynamodb_name: ${{ secrets.lock_dynamodb_name }}
          aws_region: ${{ secrets.aws_region }}

      - name: Terraform Plan
        id: plan
        run: >
          terraform plan -no-color -input=false
        continue-on-error: ${{ inputs.allow_plan_error }}

      - name: Setup Plan Comments
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "Terraform Plan: \n${{ steps.plan.outputs.stdout }}"
          TFSEC: "TF Sec Check: \n${{ steps.setup.outputs.tfsec_stdout }}"
          WORK_DIR: "${{ inputs.working_directory }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(`Plan Results`);
            })

            const warningMessage =  "## Warning: Merging this PR means it will deploy the planned resources.";

            const planMessage = `
            ## \`${{ inputs.working_directory }}\` Plan Results
            #### Terraform Format and Style 🖌\`${{ steps.setup.outputs.fmt_outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.setup.outputs.init_outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.setup.outputs.validate_outcome }}\`
            #### Terraform Security Check 🛡️\`${{ steps.setup.outputs.tfsec_outcome }}\`

            <details><summary>Show TFSec Check</summary>

            \`\`\`\n
            ${process.env.TFSEC}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            const output = github.base_ref === 'main' ? planMessage : `${warningMessage}\n\n${planMessage}`

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
